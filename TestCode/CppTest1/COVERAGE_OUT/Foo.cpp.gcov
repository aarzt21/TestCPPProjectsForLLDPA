        -:    0:Source:/home/alex/Desktop/TestCode/CppTest1/Foo.cpp
        -:    0:Graph:/home/alex/Desktop/TestCode/CppTest1/COVERAGE_OUT/OUT-Foo.gcno
        -:    0:Data:/home/alex/Desktop/TestCode/CppTest1/COVERAGE_OUT/OUT-Foo.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by alex on 07.08.23.
        -:    3://
        -:    4:
        -:    5:#include "Foo.h"
        -:    6:
        1:    7:Foo::Foo(std::string name) : name(name), status(1) {}
        -:    8:
    #####:    9:int Foo::get_status() {
    #####:   10:    return status;
        -:   11:}
        -:   12:
     1000:   13:float Foo::calculate_result(std::vector<int> &data, bool inc_neg) {
     1000:   14:    float res = 0.0;
     1000:   15:    if (inc_neg){
 10001000:   16:        for (auto& e: data){
 10000000:   17:            res += e;
        -:   18:        }
     1000:   19:        result = res/data.size();
     1000:   20:        return result;
        -:   21:    }
        -:   22:    else {
    #####:   23:        int count = 0;
    #####:   24:        for (auto& e: data){
    #####:   25:            if (e >= 0){
    #####:   26:            	res += e; 
    #####:   27:            	count++;
        -:   28:            }
        -:   29:        }
    #####:   30:        result = res/count;
    #####:   31:        return result;
        -:   32:    }
        -:   33:}
        -:   34:
    10000:   35:void Foo::foo(std::vector<int> &data) {
    10000:   36:    int res = 0;
        -:   37:
100010000:   38:    for (auto& e: data){
100000000:   39:        if (e != 325) {
 99910000:   40:          res += e;
        -:   41:        }
        -:   42:        else {
    90000:   43:            res--;
    90000:   44:            res--;
    90000:   45:            res--;
    90000:   46:            res--;
        -:   47:        }
        -:   48:    }
    10000:   49:}
        -:   50:
    10000:   51:std::string Foo::get_name() {
    10000:   52:    return name;
        -:   53:}
        -:   54:
    10000:   55:void Foo::shout() {
    10000:   56:    std::cout << "Hello from Foo Parent" << std::endl;
    10000:   57:}
        -:   58:
      101:   59:void Foo::set_status(int newStatus) {
      101:   60:    status = newStatus;
      101:   61:}
